{
  "version": 3,
  "file": "main.css",
  "sources": [
    "../Main.svelte",
    "../ChannelList.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import channelsData from '../data/provider-channels.js'\n  import providersData from '../data/providers.js'\n  import ChannelList from './ChannelList.svelte'\n  import ChannelSelector from './VisibilitySelector.svelte'\n  import ProviderSelector from './VisibilitySelector.svelte'\n\n  let isDarkMode = false\n  let providerPickMode = false\n  let channelPickMode = false\n  let shownChannels = {}\n  let shownProviders = {}\n\n  let channels = sortArrayByProperty(channelsData, 'name')\n  let providers = sortArrayByProperty(providersData, 'name')\n\n  if (window.matchMedia) {\n    const mediaQueryList = window.matchMedia('(prefers-color-scheme: dark)')\n\n    function colorSchemeChange(mql) {\n      isDarkMode = mql.matches\n      console.log(`darkMode: ${isDarkMode}`)\n    }\n\n    mediaQueryList.addListener(colorSchemeChange)\n    colorSchemeChange(mediaQueryList)\n  }\n\n  channels.forEach(channel => shownChannels[channel.name] = true)\n  providers.forEach(provider => shownProviders[provider.name] = true)\n  \n  function sortArrayByProperty(array, prop) {\n    return array.slice().sort((a, b) => {\n      const first = a[prop].toUpperCase()\n      const next = b[prop].toUpperCase()\n\n      if (first < next) {\n        return -1\n      } else return 1\n    })\n  }\n\n  const localStorageShownChannels = localStorage.getItem('shownChannels')\n  if (localStorageShownChannels) {\n    Object.assign(shownChannels, JSON.parse(localStorageShownChannels))\n  }\n\n  const localStorageShownProviders = localStorage.getItem('shownProviders')\n  if (localStorageShownProviders) {\n    let providersForMigration = JSON.parse(localStorageShownProviders)\n\n    //Migrate old provider keys to new ones. Delete defunct providers.\n    if (providersForMigration['Sling TV']) {\n      providersForMigration['Sling Orange'] = providersForMigration['Sling TV']\n      providersForMigration['Sling Blue'] = providersForMigration['Sling TV']\n\n      delete providersForMigration['Sling TV']\n    }\n\n    if (providersForMigration['DirecTV Now']) {\n      providersForMigration['AT&T TV Now'] =\n      providersForMigration['DirecTV Now']\n\n      delete providersForMigration['DirecTV Now']\n    }\n\n    delete providersForMigration['PlayStation Vue']\n\n    Object.assign(shownProviders, providersForMigration)\n\n    //Now that we've migrated, rewrite the providers.\n    localStorage.setItem('shownProviders', JSON.stringify(providersForMigration))\n  }\n\n  $: visibleChannels = channels.filter(channel => shownChannels[channel.name])\n  $: visibleProviders = providers.filter(provider => shownProviders[provider.name])\n  $: pickingMode = channelPickMode || providerPickMode\n\n  function showAll(show) {\n    if (channelPickMode) {\n      Object.keys(shownChannels).forEach(channel => {\n        shownChannels[channel] = show\n      })\n\n      if (show) localStorage.removeItem('shownChannels')\n      else localStorage.setItem('shownChannels', JSON.stringify(shownChannels))\n    } else if (providerPickMode) {\n      Object.keys(shownProviders).forEach(provider => {\n        shownProviders[provider] = show\n      });\n\n      if (show) localStorage.removeItem('shownProviders')\n      else\n        localStorage.setItem('shownProviders', JSON.stringify(shownProviders))\n    }\n  }\n\n  function donePicking() {\n    channelPickMode = false\n    providerPickMode = false\n  }\n</script>\n\n<style>\n  .pick-buttons {\n    margin-top: 5px;\n    margin-bottom: 5px;\n    display: inline-block;\n    cursor: pointer;\n  }\n</style>\n\n<div class=\"container\">\n  <div class=\"d-flex mb-1 mt-1\" class:sticky={pickingMode}>\n    <div class=\"mr-auto\">\n      {#if pickingMode}\n        <button\n          class=\"btn btn-outline-primary pick-buttons\"\n          on:click={e => showAll(true)}>\n          Select All\n        </button>\n        <button\n          class=\"btn btn-outline-primary pick-buttons\"\n          on:click={e => showAll(false)}>\n          Select None\n        </button>\n      {:else}\n      <p class=\"h3 d-none d-sm-block\" class:text-white={isDarkMode}>\n        Way\n        <a\n          style=\"color: unset\"\n          href=\"https://en.wikipedia.org/wiki/Over-the-top_content\"\n          target=\"_blank\">\n          Over the Top\n        </a>\n      </p>\n      {/if}\n    </div>\n    <div>\n    {#if pickingMode}\n      <button\n        class=\"btn btn-outline-primary pick-buttons\"\n        on:click={e => donePicking()}>\n        Done\n      </button>\n    {:else}\n      <button\n        class=\"btn btn-outline-primary pick-buttons\"\n        on:click={e => channelPickMode = true}>\n        Pick Channels\n      </button>\n      <button\n        class=\"btn btn-outline-primary pick-buttons\"\n        on:click={e => providerPickMode = true}>\n        Pick Providers\n      </button>\n    {/if}\n    </div>\n  </div>\n  {#if channelPickMode}\n    <ChannelSelector\n      context={'Channels'}\n      displayProperty={'name'}\n      bind:items={channels}\n      bind:visibleItems={visibleChannels}\n      bind:shown={shownChannels}\n      isDarkMode=\"{isDarkMode}\" />\n  {:else if providerPickMode}\n    <ProviderSelector\n      context={'Providers'}\n      displayProperty={'name'}\n      bind:items={providers}\n      bind:visibleItems={visibleProviders}\n      bind:shown={shownProviders}\n      isDarkMode=\"{isDarkMode}\" />\n  {:else}\n    <ChannelList isDarkMode=\"{isDarkMode}\" channels={visibleChannels} providers={visibleProviders} />\n  {/if}\n</div>\n",
    "<script>\n\texport let providers = []\n\texport let channels = []\n\texport let isDarkMode = false\n\t$: displayChannels = calcDisplayChannel(channels, providers)\n\n\tconst badge = (className, text) => {\n\t\treturn { className, text }\n\t}\n\n\tconst yes = badge('badge-primary', 'Yes')\n\tconst no = badge('badge-danger', 'No')\n\tconst addon = badge('badge-warning', 'Add-on')\n\n\tconst getBadge = (channel, provider) => {\n\t\tconst providerChannelSupport = channel.providers[provider.name]\n\n\t\tif (providerChannelSupport === 'add-on') {\n\t\t\treturn addon\n\t\t} else if (providerChannelSupport) {\n\t\t\treturn yes\n\t\t} else {\n\t\t\treturn no\n\t\t}\n\t}\n\n\tconst calcDisplayChannel = (channels, providers) => {\n\t\treturn channels.map(channel => {\n\t\t\tconst providerBadges = providers\n\t\t\t\t.reduce((acc, provider) => {\n\t\t\t\t\treturn Object.assign({}, acc, {\n\t\t\t\t\t\t[provider.name]: getBadge(channel, provider)\n\t\t\t\t\t})\n\t\t\t\t}, {})\n\n\t\t\treturn Object.assign({}, channel, { providers: providerBadges })\n\t\t})\n\t}\n</script>\n\n<style>\n\ta {\n\t\tcolor: unset;\n\t}\n</style>\n\n<div class=\"table-responsive\">\n\t<table class=\"table table-hover table-bordered\" class:table-dark=\"{isDarkMode}\">\n\t\t<thead>\n\t\t\t<tr>\n\t\t\t\t<th scope=\"col\">\n\t\t\t\t\tChannel\n\t\t\t\t</th>\n\t\t\t\t{#each providers as provider}\n\t\t\t\t<th scope=\"col\">\n\t\t\t\t\t<a href=\"{provider.url}\" target=\"_blank\">{provider.name}</a>\n\t\t\t\t</th>\n\t\t\t\t{/each}\n\t\t\t</tr>\n\t\t</thead>\n\t\t<tbody>\n\t\t\t{#each displayChannels as channel}\n\t\t\t<tr>\n\t\t\t\t<th scope=\"row\">{channel.name}</th>\n\t\t\t\t{#each Object.keys(channel.providers) as provider}\n\t\t\t\t<td>\n\t\t\t\t\t<span class=\"badge badge-pill {channel.providers[provider].className}\">\n\t\t\t\t\t\t{channel.providers[provider].text}\n\t\t\t\t\t</span>\n\t\t\t\t</td>\n\t\t\t\t{/each}\n\t\t\t</tr>\n\t\t\t{/each}\n\t\t</tbody>\n\t</table>\n</div>"
  ],
  "names": [],
  "mappings": "AAwGE,aAAa,cAAC,CAAC,AACb,UAAU,CAAE,GAAG,CACf,aAAa,CAAE,GAAG,CAClB,OAAO,CAAE,YAAY,CACrB,MAAM,CAAE,OAAO,AACjB,CAAC;ACpEF,CAAC,eAAC,CAAC,AACF,KAAK,CAAE,KAAK,AACb,CAAC"
}